// Generated by view binder compiler. Do not edit!
package com.example.appfood.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.appfood.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemDonHangBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView tvEmail;

  @NonNull
  public final TextView tvGhiChu;

  @NonNull
  public final TextView tvSoDienThoai;

  @NonNull
  public final TextView tvTenKhachHang;

  @NonNull
  public final TextView tvTongTien;

  @NonNull
  public final TextView tvid;

  private ItemDonHangBinding(@NonNull LinearLayout rootView, @NonNull TextView tvEmail,
      @NonNull TextView tvGhiChu, @NonNull TextView tvSoDienThoai, @NonNull TextView tvTenKhachHang,
      @NonNull TextView tvTongTien, @NonNull TextView tvid) {
    this.rootView = rootView;
    this.tvEmail = tvEmail;
    this.tvGhiChu = tvGhiChu;
    this.tvSoDienThoai = tvSoDienThoai;
    this.tvTenKhachHang = tvTenKhachHang;
    this.tvTongTien = tvTongTien;
    this.tvid = tvid;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemDonHangBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemDonHangBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_don_hang, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemDonHangBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.tvEmail;
      TextView tvEmail = ViewBindings.findChildViewById(rootView, id);
      if (tvEmail == null) {
        break missingId;
      }

      id = R.id.tvGhiChu;
      TextView tvGhiChu = ViewBindings.findChildViewById(rootView, id);
      if (tvGhiChu == null) {
        break missingId;
      }

      id = R.id.tvSoDienThoai;
      TextView tvSoDienThoai = ViewBindings.findChildViewById(rootView, id);
      if (tvSoDienThoai == null) {
        break missingId;
      }

      id = R.id.tvTenKhachHang;
      TextView tvTenKhachHang = ViewBindings.findChildViewById(rootView, id);
      if (tvTenKhachHang == null) {
        break missingId;
      }

      id = R.id.tvTongTien;
      TextView tvTongTien = ViewBindings.findChildViewById(rootView, id);
      if (tvTongTien == null) {
        break missingId;
      }

      id = R.id.tvid;
      TextView tvid = ViewBindings.findChildViewById(rootView, id);
      if (tvid == null) {
        break missingId;
      }

      return new ItemDonHangBinding((LinearLayout) rootView, tvEmail, tvGhiChu, tvSoDienThoai,
          tvTenKhachHang, tvTongTien, tvid);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
